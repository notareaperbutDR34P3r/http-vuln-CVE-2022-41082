local http = require "http"
local shortport = require "shortport"
local stdnse = require "stdnse"
local string = require "string"
local vulns = require "vulns"
local rand = require "rand"

description = [[
Checks for the Exchange 0-Day vulnerability: CVE-2022-41082 (if virtual patching has been implemented correctly). The script will make up to 5 HTTP redirects, using the default rules in the HTTP library.
]]

author = "Gr1mmeyDR34P3R"

categories = {"default", "vuln", "safe"}

portrule = function(host)
  return (shortport.http(host) or shortport.https(host))
end

action = function(host, port)
  local resp, redirect_url, title

  local basepath = stdnse.get_script_args(SCRIPT_NAME..".url")
  local method = string.upper(stdnse.get_script_args(SCRIPT_NAME..".method") or "GET")

  local vuln = {
    title = "Microsoft Exchange - 0-day RCE",
    state = vulns.STATE.NOT_VULN,
    risk_factor = "High",
    scores = {
      CVSSv2 = "10.0 (HIGH) (AV:N/AC:L/AU:N/C:C/I:C/A:C)",
    },
    description = [[
Exchange 0-day vuln: CVE-2022-41082
    ]],
    IDS = {CVE = "CVE-2022-41082"},
    references = {
      'https://www.microsoft.com/security/blog/2022/09/30/analyzing-attacks-using-the-exchange-vulnerabilities-cve-2022-41040-and-cve-2022-41082/',
      'https://msrc-blog.microsoft.com/2022/09/29/customer-guidance-for-reported-zero-day-vulnerabilities-in-microsoft-exchange-server/',
      'https://microsoft.github.io/CSS-Exchange/Security/EOMTv2/'
    },
    dates = { disclosure = { year = '2022', month = '09', day = '29' } }
  }

  local vuln_report = vulns.Report:new(SCRIPT_NAME, host, port)

  if not basepath then
    basepath = "/"
  end

  path = basepath .. 'autodiscover/autodiscover.json@Powershell.'..rand.random_alpha(10)..'.com/owa/'

  target = host.ip .. "-" .. port.number

  stdnse.debug1("Final path: "..path)

  local request_opts = {
    header = {
      Connection = "close"
    },
    bypass_cache = true,
    no_cache = true
  }

  resp = http.get( host, port, path, request_opts )
  -- Check if there's a redirect
  if resp.location then
    redirect_url = resp.location[#resp.location]
    if resp.status and tostring( resp.status ):match( "30%d" ) then
      return {redirect_url = redirect_url}, ("Did not follow redirect to %s"):format( redirect_url )
    end
  end

  local response = http.generic_request( host, port, method, path, { no_cache = true } )

  if response.status and response.status == 401 then
    -- X-OWA-Version
    if response.header['x-owa-version'] then
      vuln.state = vulns.STATE.VULN
    else
      vuln.state = vulns.STATE.LIKELY_VULN
    end
  end
